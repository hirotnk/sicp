a) restore n; <- meaning (restore val) (assign n val)
   (assign val (op +) (reg val) (reg n))
b)

 (define (make-save inst machine stack pc)
-  (let ((reg (get-register machine (stack-inst-reg-name inst))))
+  (let ((reg (get-register machine (stack-inst-reg-name inst)))
+        (reg-name (stack-inst-reg-name inst)))
     (lambda ()
-      (push stack (get-contents reg))
+      (push stack (cons reg-name (get-contents reg)))
       (advance-pc pc))))
+
 (define (make-restore inst machine stack pc)
-  (let ((reg (get-register machine (stack-inst-reg-name inst))))
+  (let ((reg (get-register machine (stack-inst-reg-name inst)))
+        (reg-name (stack-inst-reg-name inst)))
     (lambda ()
-      (set-contents! reg (pop stack))
-      (advance-pc pc))))
+      (let ((datum (pop stack)))
+        (if (eq? (car datum) reg-name)
+             (begin (set-contents! reg (cdr datum))
+             (advance-pc pc))
+            (error "Bad restore instruction: stack reg:" reg-name " instruction reg:" (car datum)))))))
+
 (define (stack-inst-reg-name stack-instruction)
   (cadr stack-instruction))
 
