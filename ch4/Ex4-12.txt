 (define (lookup-variable-value var env)
-  (define (env-loop env)
-    (define (scan in-frame)
-      (cond
-        ((null? in-frame) (env-loop (enclosing-environment env)))
-        ((eq? var (car (car in-frame))) (cdr (car in-frame)))
-        (else (scan (cdr in-frame)))))
-    (if
-      (eq? env the-empty-environment) (error "Unbound variable" var)
-      (let
-        ((frame (first-frame env)))
-        (scan frame))))
-  (env-loop env))
+  (if
+    (eq? env the-empty-environment) (error "Unbound variable" var)
+    (env-loop var env (lambda (x) (cdr x)))))
 
 (define (set-variable-value! var val env)
-  (define (env-loop env)
-    (define (scan in-frame)
-      (cond
-        ((null? in-frame) (env-loop (enclosing-environment env)))
-        ((eq? var (car (car in-frame))) (set-cdr! (car in-frame) val))
-        (else (scan (cdr in-frame)))))
-    (if
-      (eq? env the-empty-environment) (error "Unbound variable: SET!" var)
-      (let
-        ((frame (first-frame env)))
-        (scan frame))))
-  (env-loop env))
+  (if
+    (eq? env the-empty-environment) (error "Unbound variable: SET!" var)
+    (env-loop var env (lambda (x) (set-cdr! x val)))))
+
+(define (env-loop var in-env func)
+  (let
+    ((retval (scan-frame var (first-frame in-env))))
+    (cond
+      ((eq? retval 'nil) (env-loop var (enclosing-environment in-env) func))
+      ((pair? retval) (func retval)))))
 
 (define (define-variable! var val env)
   (let
-    ((frame (first-frame env)))
-      (define (scan in-frame)
-        (cond
-          ((null? in-frame) (add-binding-to-frame! var val frame))
-          ((eq? var (get-var (car in-frame))) (set-cdr! (cdr in-frame) val))
-          (else
-            (scan (cdr in-frame)))))
-      (scan frame)))
+    ((frame (first-frame env))
+     (retval (scan-frame var (first-frame env))))
+     (cond
+        ((eq? retval 'nil) (add-binding-to-frame! var val frame))
+        ((pair? retval) (set-cdr! retval val))
+        (else (error "Scan-frame:" retval)))))
+
 (define (get-var elem) (car elem))
 (define (get-val elem) (cdr elem))
 

;; This function can be replaced by assoc entirely.
+(define (scan-frame var frame)
+  (cond
+    ((null? frame) 'nil)
+    ((eq? var (get-var (car frame))) (car frame))
+    (else (scan-frame var (cdr frame)))))
+
+

;; Execution
;; gosh> ^D
;; [/Users/yoshi/gith/giggle/sicp/ch4%] rlwrap gosh
;; gosh> (load "./repl")
;; #t
;; gosh> (define x 2)
;; x
;; gosh> x
;; 2
;; gosh> (define (myfunc x) (* y x))
;; myfunc
;; gosh> (define y 3)
;; y
;; gosh> (myfunc x)
;; 6
;; gosh>
;; 

