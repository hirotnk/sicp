a.
((letrec? exp) (eval (letrec->combination exp) env))

; letrec->combination
(define (letrec? exp) (tagged-list? exp 'letrec))
(define (letrec->combination exp)
  (let
    ((varlist (map car (cadr exp)))
     (body (caddr exp)))
    (append
      (list
        'let
        (map (lambda (varname) (list varname (quote '*unassigned*))) varlist))
      (append
        (map
          (lambda (var_arg_pair) (list 'set! (car var_arg_pair) (cadr var_arg_pair)))
          (cadr exp))
        (list body)))))

b.
The definition of
(define (f x)
  (let
    ((even? (lambda (n) (if (= n 0) true (odd? (- n 1)))))
     (odd? (lambda (n) (if (= n 0) false (even? (- n 1))))))
    <rest of body of f>))
is transformed to =>
(define (f x)
  ((lambda (even? odd?)
    <rest of body of f>)
   (lambda (n) (if (= n 0) true (odd? (- n 1))))
   (lambda (n) (if (= n 0) false (even? (- n 1))))))
and when this is evaluated, thre is no way to reference odd? or even?.
    
    
If we define it as following:
(define (f x)
  (let
    ((even? 'unassigned)
     (odd? 'unassigned))
    (set! even? (lambda (n) (if (= n 0) true (odd? (- n 1)))))
    (set! odd? (lambda (n) (if (= n 0) false (even? (- n 1)))))
    <rest of body of f>))

Then it will be transformed into:

(define (f x)
  ((lambda (even? odd?)
    (set! even? (lambda (n) (if (= n 0) true (odd? (- n 1)))))
    (set! odd? (lambda (n) (if (= n 0) false (even? (- n 1)))))
    <rest of body of f>)
   'unassigned 'unassigned))

I think this will work.


